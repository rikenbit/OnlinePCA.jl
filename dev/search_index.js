var documenterSearchIndex = {"docs":
[{"location":"commandline/#OnlinePCA.jl-(Command-line-tool)","page":"Command line Tool","title":"OnlinePCA.jl (Command line tool)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"All functions can be performed as command line tool in shell window and same options in OnlinePCA.jl (Julia API) are available.","category":"page"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"After installation of OnlinePCA.jl, command line tools are saved at YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/.","category":"page"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"The functions can be performed as below.","category":"page"},{"location":"commandline/#Binarization-(CSV-file)","page":"Command line Tool","title":"Binarization (CSV file)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/csv2bin \\\n--csvfile Data.csv \\\n--binfile OUTDIR/Data.zst","category":"page"},{"location":"commandline/#Binarization-(Matrix-Market-MM-file)","page":"Command line Tool","title":"Binarization (Matrix Market <MM> file)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/mm2bin \\\n--mmfile Data.mtx \\\n--binfile OUTDIR/Data.mtx.zst","category":"page"},{"location":"commandline/#Binarization-(Binary-COO-BinCOO-file)","page":"Command line Tool","title":"Binarization (Binary COO <BinCOO> file)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/bincoo2bin \\\n--mmfile Data.bincoo \\\n--binfile OUTDIR/Data.bincoo.zst","category":"page"},{"location":"commandline/#Summarization-(CSV-file)","page":"Command line Tool","title":"Summarization (CSV file)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/sumr \\\n--binfile OUTDIR/Data.zst \\\n--outdir OUTDIR \\\n--pseudocount 1f0","category":"page"},{"location":"commandline/#Summarization-(MM-file)","page":"Command line Tool","title":"Summarization (MM file)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/sumr \\\n--binfile OUTDIR/Data.zst \\\n--outdir OUTDIR \\\n--pseudocount 1f0 \\\n--sparse_mode true","category":"page"},{"location":"commandline/#Filtering","page":"Command line Tool","title":"Filtering","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/filtering \\\n--binfile OUTDIR/Data.zst \\\n--featurelist OUTDIR/Feature_Means.csv \\\n--thr1 10 \\\n--direct1 \"+\" \\\n--outdir OUTDIR","category":"page"},{"location":"commandline/#Identifying-Highly-Variable-Genes","page":"Command line Tool","title":"Identifying Highly Variable Genes","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/hvg \\\n--binfile OUTDIR/Data.zst \\\n--rowmeanlist OUTDIR/Feature_Means.csv \\\n--rowvarlist OUTDIR/Feature_Vars.csv \\\n--rowcv2list OUTDIR/Feature_CV2s.csv \\\n--outdir OUTDIR","category":"page"},{"location":"commandline/#GD-PCA","page":"Command line Tool","title":"GD-PCA","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/gd \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--stepsize 0.1 \\\n--numepoch 5 \\\n--scheduling \"robbins-monro\" \\\n--g 0.9 \\\n--epsilon 1.0e-8 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--evalfreq 5000 \\\n--offsetFull 1f-20 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#SGD-PCA","page":"Command line Tool","title":"SGD-PCA","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/rsgd \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--stepsize 0.1 \\\n--numepoch 5 \\\n--scheduling \"robbins-monro\" \\\n--g 0.9 \\\n--epsilon 1.0e-8 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--evalfreq 5000 \\\n--offsetStoch 1f-6 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Oja's-method","page":"Command line Tool","title":"Oja's method","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/oja \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--stepsize 0.1 \\\n--numepoch 3 \\\n--scheduling \"robbins-monro\" \\\n--g 0.9 \\\n--epsilon 1.0e-8 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--evalfreq 5000 \\\n--offsetStoch 1f-6 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#CCIPCA","page":"Command line Tool","title":"CCIPCA","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/ccipca \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--stepsize 0.1 \\\n--numepoch 3 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--evalfreq 5000 \\\n--offsetStoch 1f-15 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#RSGD-PCA","page":"Command line Tool","title":"RSGD-PCA","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/rsgd \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--stepsize 0.1 \\\n--numepoch 5 \\\n--scheduling \"robbins-monro\" \\\n--g 0.9 \\\n--epsilon 1.0e-8 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--evalfreq 5000 \\\n--offsetStoch 1f-6 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#SVRG-PCA","page":"Command line Tool","title":"SVRG-PCA","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/svrg \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--stepsize 0.1 \\\n--numepoch 5 \\\n--scheduling \"robbins-monro\" \\\n--g 0.9 \\\n--epsilon 1.0e-8 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--evalfreq 5000 \\\n--offsetFull 1f-20 \\\n--offsetStoch 1f-6 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#RSVRG-PCA","page":"Command line Tool","title":"RSVRG-PCA","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/rsvrg \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--stepsize 0.1 \\\n--numepoch 5 \\\n--scheduling \"robbins-monro\" \\\n--g 0.9 \\\n--epsilon 1.0e-8 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--evalfreq 5000 \\\n--offsetFull 1f-20 \\\n--offsetStoch 1f-6 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Orthogonal-Iteration-(Power-method)","page":"Command line Tool","title":"Orthogonal Iteration (Power method)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/orthiter \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--numepoch 10 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Arnoldi-method","page":"Command line Tool","title":"Arnoldi method","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/arnoldi \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--numepoch 10 \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Lanczos-method","page":"Command line Tool","title":"Lanczos method","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/lanczos \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--numepoch 10 \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Halko's-method","page":"Command line Tool","title":"Halko's method","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/halko \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Algorithm-971","page":"Command line Tool","title":"Algorithm 971","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/algorithm971 \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Randomized-Block-Krylov-Iteration","page":"Command line Tool","title":"Randomized Block Krylov Iteration","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/rbkiter \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--numepoch 10 \\\n--lower 0 \\\n--upper 1.0f+38 \\\n--expvar 0.1f0 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Single-pass-PCA-type-I","page":"Command line Tool","title":"Single-pass PCA type I","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/singlepass \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--noversamples 5 \\\n--niter 3 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Single-pass-PCA-type-II","page":"Command line Tool","title":"Single-pass PCA type II","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/singlepass2 \\\n--input Data.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--pseudocount 1f0 \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--noversamples 5 \\\n--niter 3 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Summarization-for-10X-HDF5","page":"Command line Tool","title":"Summarization for 10X-HDF5","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/tenxsumr \\\n--tenxfile Data.zst \\\n--outdir OUTDIR \\\n--group mm10 \\\n--chunksize 5000","category":"page"},{"location":"commandline/#ALGORITHM971-for-10X-HDF5","page":"Command line Tool","title":"ALGORITHM971 for 10X-HDF5","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/tenxpca \\\n--tenxfile Data.h5 \\\n--outdir OUTDIR \\\n--scale sqrt \\\n--rowmeanlist Feature_SqrtMeans.csv \\\n--rowvarlist Feature_SqrtVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--noversamples 5 \\\n--niter 3 \\\n--chunksize 5000 \\\n--group mm10 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Sparse-Randomized-SVD-(ALGORITHM971-for-Binarized-MM-file)","page":"Command line Tool","title":"Sparse Randomized SVD (ALGORITHM971 for Binarized MM file)","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/sparse_rsvd \\\n--input Data.mtx.zst \\\n--outdir OUTDIR \\\n--scale ftt \\\n--rowmeanlist Feature_FTTMeans.csv \\\n--rowvarlist Feature_FTTVars.csv \\\n--colsumlist Sample_NoCounts.csv \\\n--dim 3 \\\n--noversamples 5 \\\n--niter 3 \\\n--chunksize 5000 \\\n--initW Eigen_vectors.csv \\\n--initV Loadings.csv \\\n--logdir OUTDIR \\\n--perm false \\\n--cper 1f0","category":"page"},{"location":"commandline/#Exact-Out-of-Core-PCA","page":"Command line Tool","title":"Exact Out-of-Core PCA","text":"","category":"section"},{"location":"commandline/","page":"Command line Tool","title":"Command line Tool","text":"shell> julia YOUR_HOME_DIR/.julia/v1.x/OnlinePCA/bin/exact_ooc_pca \\\n--input Data.mtx.zst \\\n--outdir OUTDIR \\\n--scale raw \\\n--pseudocount 1f0 \\\n--dim 3 \\\n--chunksize 5000 \\\n--sparse_mode true","category":"page"},{"location":"#OnlinePCA.jl-Documentation","page":"Home","title":"OnlinePCA.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"OnlinePCA.jl binarizes CSV file, summarizes the information of data matrix and, performs some online-PCA functions for extreamly large scale matrix in an out-of-core manner without loading whole data on memory space.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Online PCA methods are performed as following three steps.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Step.1 Binarization : We asssume that the data is matrix filled in integar count value and saved as comma-separated CSV file. The CSV file is converted to Julia binary file by csv2bin function. This step extremely accelerates I/O speed. Starting with version 0.3.0, the mm2bin function is also available. This function generates binary files for data in Matrix Market (MM) format, not CSV.\nStep.2 Summarization : sumr function parses the binary file and then extract some summary statistics in each row and each column. The information is used by Step.3. Starting with version 0.3.0, the sparse_mode argument was added to the sumr function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If this is specified as true, sumr can be applied to binary files output by mm2bin. Assuming a situation where the input file is the HDF5 formatted by 10X Genomics, we also prepared tenxsumr function.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Step.3 Online PCA : Some online PCA functions can be performed against the binary file. By using mean vector of each row generated by Step.2, row-wise centering (c.f. --rowmeanlist option) is performed. Likewise, sum vector of each columns are used column-wise normalization (c.f. --colsumlist option). gd, sgd, oja, ccipca, rsgd, svrg, rsvrg, orthiter, lanczos, arnoldi, rbkiter, halko, algorithm971, singlepass, and singlepass2 are implemented. Assuming a situation where the input file is the HDF5 formatted by 10X Genomics, we also prepared tenxpca function. Starting with version 0.3.0, the function sparse_rsvd has been released, allowing the same algorithm (algorithm971) as tenxpca to be performed on mm2bin output files. A function named extract_ooc_pca is also publicly available since version 0.3.0, which performs dimensionality compression by eigenvalue decomposition after constructing a column-by-column covariance matrix out-of-core for longitudinal data. This is not an approximate algorithm, but uses full-rank eigenvalue decomposition.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All programs are available as Julia API (OnlinePCA.jl (Julia API)) and command line tool (OnlinePCA.jl (Command line tool)).","category":"page"},{"location":"#Reference","page":"Home","title":"Reference","text":"","category":"section"},{"location":"#Algorithms","page":"Home","title":"Algorithms","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Gradient-based","category":"page"},{"location":"","page":"Home","title":"Home","text":"- GD-PCA\n- SGD-PCA\n- Oja's method : [Erkki Oja et. al., 1985](https://www.sciencedirect.com/science/article/pii/0022247X85901313), [Erkki Oja, 1992](https://www.sciencedirect.com/science/article/pii/S0893608005800899)\n- CCIPCA : [Juyang Weng et. al., 2003](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.7.5665&rep=rep1&type=pdf)\n- RSGD-PCA : [Silvere Bonnabel, 2013](https://arxiv.org/abs/1111.5280)\n- SVRG-PCA : [Ohad Shamir, 2015](http://proceedings.mlr.press/v37/shamir15.pdf)\n- RSVRG-PCA : [Hongyi Zhang, et. al., 2016](http://papers.nips.cc/paper/6515-riemannian-svrg-fast-stochastic-optimization-on-riemannian-manifolds.pdf), [Hiroyuki Sato, et. al., 2017](https://arxiv.org/abs/1702.05594)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Krylov subspace-based","category":"page"},{"location":"","page":"Home","title":"Home","text":"- Orthgonal Iteration (A power method to calculate multiple eigenvectors at once) : [Zhaofun Bai, 1987](https://www.amazon.co.jp/Templates-Solution-Algebraic-Eigenvalue-Problems/dp/0898714710)\n- Arnoldi method : [Zhaofun Bai, 1987](https://www.amazon.co.jp/Templates-Solution-Algebraic-Eigenvalue-Problems/dp/0898714710)\n- Lanczos method : [Zhaofun Bai, 1987](https://www.amazon.co.jp/Templates-Solution-Algebraic-Eigenvalue-Problems/dp/0898714710)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Random projection-based","category":"page"},{"location":"","page":"Home","title":"Home","text":"- Halko's method : [Halko, N., et. al., 2011](https://arxiv.org/abs/0909.4061), [Halko, N. et. al., 2011](https://epubs.siam.org/doi/abs/10.1137/100804139)\n- Algorithm971 : [George C. Linderman, et. al., 2017](https://arxiv.org/abs/1712.09005), [Huamin, Li, et. al., 2017](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5625842/), [Vladimir Rokhlin, et. al., 2009](https://arxiv.org/abs/0809.2274)\n- Randomized Block Krylov Iteration : [W, Yu, et. al., 2017](https://arxiv.org/abs/1504.05477)\n- Single-pass PCA : [C Musco, et. al., 2015](https://www.ijcai.org/proceedings/2017/0468.pdf)","category":"page"},{"location":"#Learning-Parameter-Scheduling","page":"Home","title":"Learning Parameter Scheduling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Robbins-Monro : Herbert Robbins, et. al., 1951\nMomentum : Ning Qian, 1999\nNesterov's Accelerated Gradient Descent（NAG） : Nesterov, 1983\nADAGRAD : John Duchi, et. al., 2011","category":"page"},{"location":"#Identifying-Highly-Variable-Genes","page":"Home","title":"Identifying Highly Variable Genes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Highly Variable Genes","category":"page"},{"location":"juliaapi/#OnlinePCA.jl-(Julia-API)","page":"Julia API","title":"OnlinePCA.jl (Julia API)","text":"","category":"section"},{"location":"juliaapi/#Binarization-(CSV-file)","page":"Julia API","title":"Binarization (CSV file)","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"csv2bin(;csvfile::AbstractString=\"\", binfile::AbstractString=\"\")","category":"page"},{"location":"juliaapi/#OnlinePCA.csv2bin-Tuple{}","page":"Julia API","title":"OnlinePCA.csv2bin","text":"csv2bin(;csvfile::AbstractString=\"\", binfile::AbstractString=\"\")\n\nConvert a CSV file to Julia Binary file.\n\ncsvfile and binfile are specified such as Data.csv and Data.dat, respectively.\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Binarization-(Matrix-Market-MM-file)","page":"Julia API","title":"Binarization (Matrix Market <MM> file)","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"mm2bin(;mmfile::AbstractString=\"\", binfile::AbstractString=\"\")","category":"page"},{"location":"juliaapi/#OnlinePCA.mm2bin-Tuple{}","page":"Julia API","title":"OnlinePCA.mm2bin","text":"mm2bin(;mmfile::AbstractString=\"\", binfile::AbstractString=\"\")\n\nConvert a Matrix Market (MM) file to Julia Binary file.\n\nInput Arguments\n\nmmfile : Matrix Market file (e.g., Data.mtx).\nbinfile : Julia Binary file (e.g., Data.mtx.zst).\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Binarization-(Binary-COO-BinCOO-file)","page":"Julia API","title":"Binarization (Binary COO <BinCOO> file)","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"bincoo2bin(;bincoofile::AbstractString=\"\", binfile::AbstractString=\"\")","category":"page"},{"location":"juliaapi/#OnlinePCA.bincoo2bin-Tuple{}","page":"Julia API","title":"OnlinePCA.bincoo2bin","text":"bincoo2bin(;bincoofile::AbstractString=\"\", binfile::AbstractString=\"\")\n\nConvert a Binary COO (BinCOO) file to Julia Binary file.\n\nInput Arguments\n\nbincoofile : Binary COO file (e.g., Data.bincoo).\nbinfile : Julia Binary file (e.g., Data.bincoo.zst).\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Summarization","page":"Julia API","title":"Summarization","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"sumr(; binfile::AbstractString=\"\", outdir::AbstractString=\".\", pseudocount::Number=1.0, sparse_mode::Bool=false)","category":"page"},{"location":"juliaapi/#OnlinePCA.sumr-Tuple{}","page":"Julia API","title":"OnlinePCA.sumr","text":"sumr(; binfile::AbstractString=\"\", outdir::AbstractString=\".\", pseudocount::Number=1.0, mode::AbstractString=\"dense\", chunksize::Int=1)\n\nExtract the summary information of data matrix.\n\nInput Arguments\n\nbinfile is a Julia Binary file generated by csv2bin function.\noutdir is specified the directory you want to save the result.\npseudocount is specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nmode : \"dense\" or \"sparse_mm\" can be specified.\nchunksize : The number of rows to be read at once.\n\nOutput Files\n\nSample_NoCounts.csv : Sum of counts in each column.\nFeature_Means.csv : Mean in each row.\nFeature_LogMeans.csv : Log10(Mean+pseudocount) in each row.\nFeature_FTTMeans.csv : FTT(Mean+pseudocount) in each row.\nFeature_Vars.csv : Sample variance in each row.\nFeature_LogVars.csv : Log10(Var+pseudocount) in each row.\nFeature_FTTVars.csv : FTT(Var+pseudocount) in each row.\nFeature_CV2s.csv : Coefficient of Variation in each row.\nFeature_NoZeros.csv : Number of zero-elements in each row.\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Filtering","page":"Julia API","title":"Filtering","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"filtering(;input::AbstractString=\"\", featurelist::AbstractString=\"\", samplelist::AbstractString=\"\", thr1::Number=0.0, thr2::Number=0.0, direct1::AbstractString=\"+\", direct2::AbstractString=\"+\", outdir::AbstractString=\".\")","category":"page"},{"location":"juliaapi/#OnlinePCA.filtering-Tuple{}","page":"Julia API","title":"OnlinePCA.filtering","text":"filtering(;input::AbstractString=\"\", featurelist::AbstractString=\"\", samplelist::AbstractString=\"\", thr1::Number=0.0, thr2::Number=0.0, direct1::AbstractString=\"+\", direct2::AbstractString=\"+\", outdir::AbstractString=\".\")\n\nThis function filters the genes by some standards such as mean or variance of the genes.\n\nInput Arguments\n\ninput : A Julia Binary file generated by csv2bin function.\nfeaturelist : A row-wise summary data such as. The CSV files are generated by csv2bin function.\nthr : The threshold to reject low-signal feature.\noutdir : The directory specified the directory you want to save the result.\n\nOutput Files\n\nfiltered.zst : Filtered binary file.\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Identifying-Highly-Variable-Genes","page":"Julia API","title":"Identifying Highly Variable Genes","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"hvg(;binfile::AbstractString=\"\", rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", rowcv2list::AbstractString=\"\", outdir::AbstractString=\".\")","category":"page"},{"location":"juliaapi/#OnlinePCA.hvg-Tuple{}","page":"Julia API","title":"OnlinePCA.hvg","text":"hvg(;binfile::AbstractString=\"\", rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", rowcv2list::AbstractString=\"\", outdir::AbstractString=\".\")\n\nThis function perform highly variable genes, which is an feature selection method in scRNA-seq studies.\n\nInput Arguments\n\nbinfile is a Julia Binary file generated by csv2bin function.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by sumr functions.\nrowcv2list : The cv2 of each row of matrix. The CSV file is generated by sumr functions.\noutdir : The directory specified the directory you want to save the result.\n\nOutput Files\n\nHVG_useForFit.csv : Parameters to estimate the highly variable genes.\nHVG_a0.csv : Parameters to estimate the highly variable genes.\nHVG_a1.csv : Parameters to estimate the highly variable genes.\nHVG_afits.csv : Parameters to estimate the highly variable genes.\nHVG_varFitRatio.csv : Parameters to estimate the highly variable genes.\nHVG_df.csv : Parameters to estimate the highly variable genes.\nHVG_pval.csv : Parameters to estimate the highly variable genes.\n\nReference\n\nHighly Variable Genes\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#GD-PCA","page":"Julia API","title":"GD-PCA","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"gd(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.gd-Tuple{}","page":"Julia API","title":"OnlinePCA.gd","text":"gd(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nGradient descent method.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nstepsize : The parameter used in every iteration.\nnumepoch : The number of epoch.\nscheduling : Learning parameter scheduling. robbins-monro, momentum, nag, and adagrad are available.\ng : The parameter that is used when scheduling is specified as nag.\nepsilon : The parameter that is used when scheduling is specified as adagrad.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\nevalfreq : Evaluation Frequency of Reconstruction Error\noffsetFull : Off set value for avoding overflow when calculating full gradient\noffsetStoch : Off set value for avoding overflow when calculating stochastic gradient\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every 1000 iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#SGD-PCA","page":"Julia API","title":"SGD-PCA","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"sgd(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.sgd-Tuple{}","page":"Julia API","title":"OnlinePCA.sgd","text":"sgd(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nStochastic gradient descent method.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nstepsize : The parameter used in every iteration.\nnumbatch : The number of batch size.\nnumepoch : The number of epoch.\nscheduling : Learning parameter scheduling. robbins-monro, momentum, nag, and adagrad are available.\ng : The parameter that is used when scheduling is specified as nag.\nepsilon : The parameter that is used when scheduling is specified as adagrad.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\nevalfreq : Evaluation Frequency of Reconstruction Error\noffsetFull : Off set value for avoding overflow when calculating full gradient\noffsetStoch : Off set value for avoding overflow when calculating stochastic gradient\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Oja's-method","page":"Julia API","title":"Oja's method","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"oja(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.oja-Tuple{}","page":"Julia API","title":"OnlinePCA.oja","text":"oja(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nOja's method.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nstepsize : The parameter used in every iteration.\nnumepoch : The number of epoch.\nscheduling : Learning parameter scheduling. robbins-monro, momentum, nag, and adagrad are available.\ng : The parameter that is used when scheduling is specified as nag.\nepsilon : The parameter that is used when scheduling is specified as adagrad.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\nevalfreq : Evaluation Frequency of Reconstruction Error\noffsetFull : Off set value for avoding overflow when calculating full gradient\noffsetStoch : Off set value for avoding overflow when calculating stochastic gradient\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\nReference\n\nSGD-PCA（Oja's method) : Erkki Oja et. al., 1985, Erkki Oja, 1992\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#CCIPCA","page":"Julia API","title":"CCIPCA","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"ccipca(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0, numepoch::Number=3, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.ccipca-Tuple{}","page":"Julia API","title":"OnlinePCA.ccipca","text":"ccipca(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0, numepoch::Number=3, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nCandid covariance-free incremental PCA.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nstepsize : The parameter used in every iteration.\nnumepoch : The number of epoch.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\nevalfreq : Evaluation Frequency of Reconstruction Error\noffsetStoch : Off set value for avoding overflow when calculating stochastic gradient\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\nReference\n\nCCIPCA : Juyang Weng et. al., 2003\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#RSGD-PCA","page":"Julia API","title":"RSGD-PCA","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"rsgd(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.rsgd-Tuple{}","page":"Julia API","title":"OnlinePCA.rsgd","text":"rsgd(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nRiemannian stochastic gradient descent method.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nstepsize : The parameter used in every iteration.\nnumbatch : The number of batch size.\nnumepoch : The number of epoch.\nscheduling : Learning parameter scheduling. robbins-monro, momentum, nag, and adagrad are available.\ng : The parameter that is used when scheduling is specified as nag.\nepsilon : The parameter that is used when scheduling is specified as adagrad.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\nevalfreq : Evaluation Frequency of Reconstruction Error\noffsetFull : Off set value for avoding overflow when calculating full gradient\noffsetStoch : Off set value for avoding overflow when calculating stochastic gradient\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\nReference\n\nRSGD-PCA : Silvere Bonnabel, 2013\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#SVRG-PCA","page":"Julia API","title":"SVRG-PCA","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"svrg(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.svrg-Tuple{}","page":"Julia API","title":"OnlinePCA.svrg","text":"svrg(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nVariance-reduced stochastic gradient descent method, also known as VR-PCA.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nstepsize : The parameter used in every iteration.\nnumbatch : The number of batch size.\nnumepoch : The number of epoch.\nscheduling : Learning parameter scheduling. robbins-monro, momentum, nag, and adagrad are available.\ng : The parameter that is used when scheduling is specified as nag.\nepsilon : The parameter that is used when scheduling is specified as adagrad.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\nevalfreq : Evaluation Frequency of Reconstruction Error\noffsetFull : Off set value for avoding overflow when calculating full gradient\noffsetStoch : Off set value for avoding overflow when calculating stochastic gradient\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\nReference\n\nSVRG-PCA : Ohad Shamir, 2015\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#RSVRG-PCA","page":"Julia API","title":"RSVRG-PCA","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"rsvrg(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.rsvrg-Tuple{}","page":"Julia API","title":"OnlinePCA.rsvrg","text":"rsvrg(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, stepsize::Number=0.1, numbatch::Number=100, numepoch::Number=3, scheduling::AbstractString=\"robbins-monro\", g::Number=0.9, epsilon::Number=1.0e-8, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, evalfreq::Number=5000, offsetFull::Number=1f-20, offsetStoch::Number=1f-6, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nRiemannian variance-reduced stochastic gradient descent method.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nstepsize : The parameter used in every iteration.\nnumbatch : The number of batch size.\nnumepoch : The number of epoch.\nscheduling : Learning parameter scheduling. robbins-monro, momentum, nag, and adagrad are available.\ng : The parameter that is used when scheduling is specified as nag.\nepsilon : The parameter that is used when scheduling is specified as adagrad.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\nevalfreq : Evaluation Frequency of Reconstruction Error\noffsetFull : Off set value for avoding overflow when calculating full gradient\noffsetStoch : Off set value for avoding overflow when calculating stochastic gradient\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\nReference\n\nRSVRG-PCA : Hongyi Zhang, et. al., 2016, Hiroyuki Sato, et. al., 2017\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Orthogonal-Iteration-(Power-method)","page":"Julia API","title":"Orthogonal Iteration (Power method)","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"orthiter(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.orthiter-Tuple{}","page":"Julia API","title":"OnlinePCA.orthiter","text":"orthiter(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nOrthogonal iteration, also known as block power method, subspace iteration or simultaneous iteration, ...etc.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnumepoch : The number of epoch.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Arnoldi-method","page":"Julia API","title":"Arnoldi method","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"arnoldi(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.arnoldi-Tuple{}","page":"Julia API","title":"OnlinePCA.arnoldi","text":"arnoldi(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, perm::Bool=false, cper::Number=1f0)\n\nArnoldi method.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Lanczos-method","page":"Julia API","title":"Lanczos method","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"lanczos(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.lanczos-Tuple{}","page":"Julia API","title":"OnlinePCA.lanczos","text":"lanczos(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, perm::Bool=false, cper::Number=1f0)\n\nLanczos method.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Halko's-method","page":"Julia API","title":"Halko's method","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"halko(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.halko-Tuple{}","page":"Julia API","title":"OnlinePCA.halko","text":"halko(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nHalko's method, which is one of randomized SVD algorithm.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnoversamples : The number of over-sampling.\nniter : The number of power interation.\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nV : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nU : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Algorithm-971","page":"Julia API","title":"Algorithm 971","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"algorithm971(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.algorithm971-Tuple{}","page":"Julia API","title":"OnlinePCA.algorithm971","text":"algorithm971(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nAlgorithm 971, which is one of randomized SVD algorithm.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnoversamples : The number of over-sampling.\nniter : The number of power interation.\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nV : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nU : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Randomized-Block-Krylov-Iteration","page":"Julia API","title":"Randomized Block Krylov Iteration","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"rbkiter(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.rbkiter-Tuple{}","page":"Julia API","title":"OnlinePCA.rbkiter","text":"rbkiter(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\",colsumlist::AbstractString=\"\", dim::Number=3, numepoch::Number=10, lower::Number=0, upper::Number=1.0f+38, expvar::Number=0.1f0, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nRandomized Block Krylov Iteration.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnumepoch : The number of epoch.\nlower : Stopping Criteria (When the relative change of error is below this value, the calculation is terminated)\nupper : Stopping Criteria (When the relative change of error is above this value, the calculation is terminated)\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nW : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nV : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\nstop : Whether the calculation is converged\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Single-pass-PCA-type-I","page":"Julia API","title":"Single-pass PCA type I","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"singlepass(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.singlepass-Tuple{}","page":"Julia API","title":"OnlinePCA.singlepass","text":"singlepass(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nSingle-pass PCA type I, which is one of randomized SVD algorithm.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnoversamples : The number of over-sampling.\nniter : The number of power interation.\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nV : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nU : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Single-pass-PCA-type-II","page":"Julia API","title":"Single-pass PCA type II","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"singlepass2(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.singlepass2-Tuple{}","page":"Julia API","title":"OnlinePCA.singlepass2","text":"singlepass2(;input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", pseudocount::Number=1f0, rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1f0)\n\nSingle-pass PCA type II, which is one of randomized SVD algorithm.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {log,ftt,raw}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnoversamples : The number of over-sampling.\nniter : The number of power interation.\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nV : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nU : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Summarization-for-10X-HDF5","page":"Julia API","title":"Summarization for 10X-HDF5","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"tenxsumr(; tenxfile::AbstractString=\"\", outdir::AbstractString=\".\", group::AbstractString=\"\", chunksize::Number=5000)","category":"page"},{"location":"juliaapi/#OnlinePCA.tenxsumr-Tuple{}","page":"Julia API","title":"OnlinePCA.tenxsumr","text":"tenxsumr(; tenxfile::AbstractString=\"\", outdir::AbstractString=\".\", group::AbstractString=\"\", chunksize::Number=5000)\n\nExtract the summary information of 10X-HDF5.\n\nInput Arguments\n\ntenxfile is the HDF5 file formatted by 10X Genomics.\noutdir is specified the directory you want to save the result.\ngroup is the group name of HDF5 (e.g. mm10).\nchunksize is the number of rows reading at once (e.g. 5000).\n\nOutput Files\n\nSample_NoCounts.csv : Sum of counts in each column.\nFeature_Means.csv : Mean in each row.\nFeature_LogMeans.csv : Log10(Mean+1) in each row.\nFeature_SqrtMeans.csv : sqrt(Mean+1) in each row.\nFeature_Vars.csv : Sample variance in each row.\nFeature_LogVars.csv : Log10(Var+1) in each row.\nFeature_SqrtVars.csv : sqrt(Var+1) in each row.\nFeature_CV2s.csv : Coefficient of Variation in each row.\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#ALGORITHM971-for-10X-HDF5","page":"Julia API","title":"ALGORITHM971 for 10X-HDF5","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"tenxpca(; tenxfile::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"sqrt\", rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, chunksize::Number=5000, group::AbstractString, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1.0f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.tenxpca-Tuple{}","page":"Julia API","title":"OnlinePCA.tenxpca","text":"tenxpca(; tenxfile::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"sqrt\", rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, chunksize::Number=5000, group::AbstractString, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1.0f0)\n\nA randomized SVD.\n\nInput Arguments\n\ntenxfile : Julia Binary file generated by OnlinePCA.csv2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {sqrt,log,raw}-scaling of the value.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnoversamples : The number of over-sampling.\nniter : The number of power interation.\nchunksize is the number of rows reading at once (e.g. 5000).\ngroup : The group name of 10XHDF5 (e.g. mm10).\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 5000) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nV : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nU : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Sparse-Randomized-SVD-(ALGORITHM971-for-Binarized-MM-file)","page":"Julia API","title":"Sparse Randomized SVD (ALGORITHM971 for Binarized MM file)","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"sparse_rsvd(; input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, chunksize::Number=1, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1.0f0)","category":"page"},{"location":"juliaapi/#OnlinePCA.sparse_rsvd-Tuple{}","page":"Julia API","title":"OnlinePCA.sparse_rsvd","text":"sparse_rsvd(; input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"ftt\", rowmeanlist::AbstractString=\"\", rowvarlist::AbstractString=\"\", colsumlist::AbstractString=\"\", dim::Number=3, noversamples::Number=5, niter::Number=3, chunksize::Number=1, initW::Union{Nothing,AbstractString}=nothing, initV::Union{Nothing,AbstractString}=nothing, logdir::Union{Nothing,AbstractString}=nothing, perm::Bool=false, cper::Number=1.0f0)\n\nA randomized SVD.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.mm2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {ftt,log,raw}-scaling of the value.\nrowmeanlist : The mean of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\nrowvarlist : The variance of each row of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ncolsumlist : The sum of counts of each columns of matrix. The CSV file is generated by OnlinePCA.sumr functions.\ndim : The number of dimension of PCA.\nnoversamples : The number of over-sampling.\nniter : The number of power interation.\nchunksize is the number of rows reading at once (e.g. 1).\ninitW : The CSV file saving the initial values of eigenvectors.\ninitV : The CSV file saving the initial values of loadings.\nlogdir : The directory where intermediate files are saved, in every evalfreq (e.g. 1) iteration.\nperm : Whether the data matrix is shuffled at random.\ncper : Count per X (e.g. CPM: Count per million <1e+6>)\n\nOutput Arguments\n\nV : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nU : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\n\n\n\n\n\n","category":"method"},{"location":"juliaapi/#Exact-Out-of-Core-PCA","page":"Julia API","title":"Exact Out-of-Core PCA","text":"","category":"section"},{"location":"juliaapi/","page":"Julia API","title":"Julia API","text":"exact_ooc_pca(; input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"raw\", pseudocount::Number=1.0f0, dim::Number=3, chunksize::Number=1, sparse_mode::Bool=false)","category":"page"},{"location":"juliaapi/#OnlinePCA.exact_ooc_pca-Tuple{}","page":"Julia API","title":"OnlinePCA.exact_ooc_pca","text":"exact_ooc_pca(; input::AbstractString=\"\", outdir::Union{Nothing,AbstractString}=nothing, scale::AbstractString=\"raw\", pseudocount::Number=1.0f0, dim::Number=3, chunksize::Number=1, mode::AbstractString=\"dense\")\n\nExact Out-of-Core PCA, which is based on normal full-rank SVD and does not assume the low-rank approximation.\n\nInput Arguments\n\ninput : Julia Binary file generated by OnlinePCA.csv2bin or OnlinPCA.mm2bin function.\noutdir : The directory specified the directory you want to save the result.\nscale : {raw,log,ftt}-scaling of the value.\npseudocount : The number specified to avoid NaN by log10(0) and used when Feature_LogMeans.csv <log10(mean+pseudocount) value of each feature> is generated.\ndim : The number of dimension of PCA.\nchunksize : The number of rows to be read at once.\nmode : \"dense\", \"sparsemm\", or \"sparsebincoo\" can be specified.\n\nOutput Arguments\n\nV : Eigen vectors of covariance matrix (No. columns of the data matrix × dim)\nλ : Eigen values (dim × dim)\nU : Loading vectors of covariance matrix (No. rows of the data matrix × dim)\nScores : Principal component scores\nExpVar : Explained variance by the eigenvectors\nTotalVar : Total variance of the data matrix\n\n\n\n\n\n","category":"method"}]
}
